Init
- Sets up shared memory
- Creates threads for command processor, 5x producer instances, consumer display


Shared memory structure
Byte    Value Stored
0       Task 1 Period (Fuel)
4       Task 2 Period (RPM)
8       Task 3 Period (Coolant Temperature)
12      Task 4 Period (Gear)
16      Task 5 Period (Speed)
20      Task 1 Value (Fuel)
24      Task 2 Value (RPM)
28      Task 3 Value (Coolant Temperature)
32      Task 4 Value (Gear)
36      Task 5 Value (Speed)


NOTE: shared memory filename does not need to be passed if you use appcore:writeSharedMem / appcore::readSharedMem

Command processor(shared_memory_filename)
- runs in thread
- does not sleep, is blocked by waiting for user input
- Prompts user for producer task number (1-5) and new period for that task (1-100)
- Writes the new period to appropriate location of shared memory for that task (overall area is bytes 0 to 19)
- On first startup, set default value of 5s period for all tasks



Producer(data_filename, shared_memory_filename, shared_memory_period_index, shared_memory_value_index)
- runs in thread
- checks getElapsedTimeSeconds and writes appropriate data value for that time to appropriate location of shared memory
- reads next period from appropriate location of shared memory file 
- sleeps period amount


Consumer(shared_memory_filename)
- runs in thread
- Runs periodically with p=1
- reads the 5 variables from shared memory (contiguous 5 floats from byte 20 to 39)
- print out the 5 variables in a nice looking way

Timing
- Done with threads and sleep(period)
- If we wanted to be fancier we could switch to tracking milliseconds and use sleep( (period-elapsed) / 1000)
    - Our functions are probably fast enough this doesn't matter

